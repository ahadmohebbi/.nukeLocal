#! C:/Program Files/Nuke15.1v3/nuke-15.1.3.dll -nx
version 15.1 v3
Gizmo {
 inputs 2
 tile_color 0x4c65ffff
 note_font Verdana
 note_font_size 12
 note_font_color 0xffffffff
 addUserKnob {20 User}
 addUserKnob {41 format T BlinkScript12.format}
 addUserKnob {26 desc l "" +STARTLINE T "Match the format of the roto coming in"}
 addUserKnob {26 ""}
 addUserKnob {22 SampleRoto l "Sample Roto" T "import nuke\nimport nuke.rotopaint as rp\n\n# Function to retrieve points from the Roto node's shapes and strokes\ndef get_roto_points(roto_node):\n    curves_knob = roto_node\['curves']\n    points = \[]\n    processed_elements = set()  # To track processed elements\n\n    # Access the root layer of the Roto node\n    root_layer = curves_knob.rootLayer\n\n    # Function to parse the layer and find shapes and strokes\n    def parse_layer(layer):\n        for element in layer:\n            element_id = id(element)  # Unique identifier for each element\n\n            # Check if the element is a Shape and not already processed\n            if isinstance(element, rp.Shape) and element_id not in processed_elements:\n                # print(f\"Processing shape: \{element.name\}\")\n                processed_elements.add(element_id)  # Mark element as processed\n\n                # Loop through the control points (CVs) in the shape\n                for point_idx, point in enumerate(element):\n                    frame = nuke.frame()\n                    # Get the position of the control vertex (center point)\n                    pos = point.center.getPosition(frame)\n                    points.append((pos\[0], pos\[1]))\n                    # Removed print statement here\n\n            # If the element is a Layer, process its contents\n            elif isinstance(element, rp.Layer) and element_id not in processed_elements:\n                # print(f\"Processing layer: \{element.name\}\")\n                processed_elements.add(element_id)  # Mark layer as processed\n                parse_layer(element)  # Recursively parse nested layers\n\n    # Parse the root layer to extract points\n    parse_layer(root_layer)\n    \n    return points\n\n# Main function to run the script and update the BlinkScript node\ndef main():\n    # Get the current node (the group node)\n    current_node = nuke.thisNode()\n\n    # Check if there is an input connected to the node (assuming input 0 is the roto node)\n    roto_node = current_node.input(0)\n    \n    if not roto_node or roto_node.Class() not in \['Roto', 'RotoPaint']:\n        nuke.message(\"Please connect a Roto or RotoPaint node to the current node.\")\n        return\n\n    # Get the points from the connected Roto or RotoPaint node\n    # print(f\"Processing connected node: \{roto_node.name()\}\")\n    roto_points = get_roto_points(roto_node)\n    \n    if not roto_points:\n        nuke.message(\"No points found in the connected Roto node.\")\n        return\n    else:\n        # Begin the group to access internal nodes\n        current_node.begin()\n\n        # Find the BlinkScript node inside the group\n        blinkscript_node = None\n        for n in nuke.allNodes():\n            if n.Class() == 'BlinkScript':\n                blinkscript_node = n\n                break\n        if blinkscript_node is None:\n            nuke.message(\"BlinkScript node not found inside the group.\")\n            current_node.end()\n            return\n\n        # Update the BlinkScript node parameters\n        # Set \"Number of Control Points\" to the number of points retrieved\n        blinkscript_node\['SplineUVMap_Number of Control Points'].setValue(len(roto_points))\n\n        # Update the positions of the points\n        max_points = 30  # Assuming the BlinkScript node has parameters up to Point29\n        for idx, point in enumerate(roto_points):\n            if idx >= max_points:\n                nuke.warning(f\"BlinkScript node supports a maximum of \{max_points\} points. Extra points are ignored.\")\n                break\n            # The point knobs are named \"SplineUVMap_Point0\", \"SplineUVMap_Point1\", etc.\n            knob_name = f\"SplineUVMap_Point\{idx\}\"\n            if knob_name in blinkscript_node.knobs():\n                blinkscript_node\[knob_name].setValue(point)\n            else:\n                nuke.warning(f\"BlinkScript node does not have knob \{knob_name\}\")\n\n        # For any remaining Point knobs, set them to (0, 0)\n        for idx in range(len(roto_points), max_points):\n            knob_name = f\"SplineUVMap_Point\{idx\}\"\n            if knob_name in blinkscript_node.knobs():\n                blinkscript_node\[knob_name].setValue((0.0, 0.0))\n\n        # End the group\n        current_node.end()\n\n# Execute the main function\nmain()\n" +STARTLINE}
 addUserKnob {41 "SplineUVMap_Number of Samples_1" l "Number of Samples" T "BlinkScript12.SplineUVMap_Number of Samples"}
 addUserKnob {41 "SplineUVMap_Max Distance" l "Max Distance" T "BlinkScript12.SplineUVMap_Max Distance"}
 addUserKnob {7 UVBLUR l "UV Blur" R 0 50}
 addUserKnob {41 "SplineUVMap_Curve Tightness" l "Curve Tightness" T "BlinkScript12.SplineUVMap_Curve Tightness"}
 addUserKnob {41 "SplineUVMap_Normalize Samples" l "Normalize Samples" T "BlinkScript12.SplineUVMap_Normalize Samples"}
 addUserKnob {26 explanation l Samples T "If you want your\nsamples evenly spread,\nnormalize them"}
 addUserKnob {26 ""}
 addUserKnob {41 "SplineUVMap_Number of Control Points" l "Number of Control Points" T "BlinkScript12.SplineUVMap_Number of Control Points"}
 addUserKnob {26 _1 l Info: T "Auto detected from Sample Roto.  \nYou can put custom control points\nin group if you want."}
 addUserKnob {26 ""}
 addUserKnob {26 tapers l " " T "Taper Controls"}
 addUserKnob {41 "SplineUVMap_Width Start" l "Width Start" T "BlinkScript12.SplineUVMap_Width Start"}
 addUserKnob {41 "SplineUVMap_Width Center" l "Width Center" T "BlinkScript12.SplineUVMap_Width Center"}
 addUserKnob {41 "SplineUVMap_Width End" l "Width End" T "BlinkScript12.SplineUVMap_Width End"}
 addUserKnob {26 ""}
 addUserKnob {26 Edge l "" -STARTLINE T "Edge Details"}
 addUserKnob {41 size l "Erode Edge" T FilterErode1.size}
 addUserKnob {41 filter l "Edge Filter" T FilterErode1.filter}
 addUserKnob {26 ""}
 addUserKnob {26 compacademy l " " T "For more:\nTools, Training, Epic Stock Footage:\n\nwww.compositingacademy.com\n\nMade in 2024"}
}
 BlinkScript {
  inputs 0
  recompileCount 1
  ProgramGroup 1
  KernelDescription "3 \"SplineUVMap\" iterate pixelWise 7323e521568e7c81daf69ed13b674e934e88cc6f9c6cb7a338b61e69790b719a 1 \"dst\" Write Point 58 \"Number of Control Points\" Int 1 BAAAAA== \"Number of Samples\" Int 1 ZAAAAA== \"Max Distance\" Float 1 AABIQg== \"Curve Tightness\" Float 1 AAAAAA== \"Width Start\" Float 1 AACAPw== \"Width Center\" Float 1 AACAPw== \"Width End\" Float 1 AACAPw== \"Normalize Samples\" Bool 1 AA== \"Point0\" Float 2 AAAAAAAAAAA= \"Point1\" Float 2 AAAAAAAAAAA= \"Point2\" Float 2 AAAAAAAAAAA= \"Point3\" Float 2 AAAAAAAAAAA= \"Point4\" Float 2 AAAAAAAAAAA= \"Point5\" Float 2 AAAAAAAAAAA= \"Point6\" Float 2 AAAAAAAAAAA= \"Point7\" Float 2 AAAAAAAAAAA= \"Point8\" Float 2 AAAAAAAAAAA= \"Point9\" Float 2 AAAAAAAAAAA= \"Point10\" Float 2 AAAAAAAAAAA= \"Point11\" Float 2 AAAAAAAAAAA= \"Point12\" Float 2 AAAAAAAAAAA= \"Point13\" Float 2 AAAAAAAAAAA= \"Point14\" Float 2 AAAAAAAAAAA= \"Point15\" Float 2 AAAAAAAAAAA= \"Point16\" Float 2 AAAAAAAAAAA= \"Point17\" Float 2 AAAAAAAAAAA= \"Point18\" Float 2 AAAAAAAAAAA= \"Point19\" Float 2 AAAAAAAAAAA= \"Point20\" Float 2 AAAAAAAAAAA= \"Point21\" Float 2 AAAAAAAAAAA= \"Point22\" Float 2 AAAAAAAAAAA= \"Point23\" Float 2 AAAAAAAAAAA= \"Point24\" Float 2 AAAAAAAAAAA= \"Point25\" Float 2 AAAAAAAAAAA= \"Point26\" Float 2 AAAAAAAAAAA= \"Point27\" Float 2 AAAAAAAAAAA= \"Point28\" Float 2 AAAAAAAAAAA= \"Point29\" Float 2 AAAAAAAAAAA= \"Point30\" Float 2 AAAAAAAAAAA= \"Point31\" Float 2 AAAAAAAAAAA= \"Point32\" Float 2 AAAAAAAAAAA= \"Point33\" Float 2 AAAAAAAAAAA= \"Point34\" Float 2 AAAAAAAAAAA= \"Point35\" Float 2 AAAAAAAAAAA= \"Point36\" Float 2 AAAAAAAAAAA= \"Point37\" Float 2 AAAAAAAAAAA= \"Point38\" Float 2 AAAAAAAAAAA= \"Point39\" Float 2 AAAAAAAAAAA= \"Point40\" Float 2 AAAAAAAAAAA= \"Point41\" Float 2 AAAAAAAAAAA= \"Point42\" Float 2 AAAAAAAAAAA= \"Point43\" Float 2 AAAAAAAAAAA= \"Point44\" Float 2 AAAAAAAAAAA= \"Point45\" Float 2 AAAAAAAAAAA= \"Point46\" Float 2 AAAAAAAAAAA= \"Point47\" Float 2 AAAAAAAAAAA= \"Point48\" Float 2 AAAAAAAAAAA= \"Point49\" Float 2 AAAAAAAAAAA= 58 \"numControlPoints\" 1 1 Default \"numSamples\" 1 1 Default \"maxDistance\" 1 1 Default \"tightness\" 1 1 Default \"widthStart\" 1 1 Default \"widthCenter\" 1 1 Default \"widthEnd\" 1 1 Default \"normalizeSamples\" 1 1 Default \"Point0\" 2 1 Default \"Point1\" 2 1 Default \"Point2\" 2 1 Default \"Point3\" 2 1 Default \"Point4\" 2 1 Default \"Point5\" 2 1 Default \"Point6\" 2 1 Default \"Point7\" 2 1 Default \"Point8\" 2 1 Default \"Point9\" 2 1 Default \"Point10\" 2 1 Default \"Point11\" 2 1 Default \"Point12\" 2 1 Default \"Point13\" 2 1 Default \"Point14\" 2 1 Default \"Point15\" 2 1 Default \"Point16\" 2 1 Default \"Point17\" 2 1 Default \"Point18\" 2 1 Default \"Point19\" 2 1 Default \"Point20\" 2 1 Default \"Point21\" 2 1 Default \"Point22\" 2 1 Default \"Point23\" 2 1 Default \"Point24\" 2 1 Default \"Point25\" 2 1 Default \"Point26\" 2 1 Default \"Point27\" 2 1 Default \"Point28\" 2 1 Default \"Point29\" 2 1 Default \"Point30\" 2 1 Default \"Point31\" 2 1 Default \"Point32\" 2 1 Default \"Point33\" 2 1 Default \"Point34\" 2 1 Default \"Point35\" 2 1 Default \"Point36\" 2 1 Default \"Point37\" 2 1 Default \"Point38\" 2 1 Default \"Point39\" 2 1 Default \"Point40\" 2 1 Default \"Point41\" 2 1 Default \"Point42\" 2 1 Default \"Point43\" 2 1 Default \"Point44\" 2 1 Default \"Point45\" 2 1 Default \"Point46\" 2 1 Default \"Point47\" 2 1 Default \"Point48\" 2 1 Default \"Point49\" 2 1 Default 0"
  EncodedSource "1 11687 "
  rebuild ""
  SplineUVMap_Point0 {83 590}
  SplineUVMap_Point1 {125 948}
  SplineUVMap_Point2 {375 1167}
  SplineUVMap_Point3 {648 1029}
  SplineUVMap_Point4 {690 633}
  SplineUVMap_Point5 {821 483}
  SplineUVMap_Point6 {964 448}
  SplineUVMap_Point7 {1056 660}
  SplineUVMap_Point8 {1180 881.2000122}
  SplineUVMap_Point9 {1248 987}
  SplineUVMap_Point10 {1460 1087}
  SplineUVMap_Point11 {1791 1037}
  protectKernelWhenPublishing true
  specifiedFormat true
  rebuild_finalise ""
  name BlinkScript12
  xpos 656
  ypos 53
 }
set N2117c000 [stack 0]
 Dot {
  name Dot1
  xpos 846
  ypos 147
 }
 FilterErode {
  name FilterErode1
  xpos 812
  ypos 258
 }
push $N2117c000
 Blur {
  size {{parent.UVBLUR}}
  name Blur1
  xpos 656
  ypos 122
 }
 Input {
  inputs 0
  name Image
  xpos 455
  ypos 168
  number 1
 }
 STMap {
  inputs 2
  uv rgb
  name STMap2
  xpos 656
  ypos 207
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge1
  xpos 656
  ypos 264
 }
 Output {
  name Output1
  xpos 656
  ypos 308
 }
 Input {
  inputs 0
  name Roto
  xpos 987
  ypos 199
 }
end_group
